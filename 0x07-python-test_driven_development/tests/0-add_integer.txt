My test case for 0-add_integer module
==========================================

 function that adds 2 integers.
The  0-add_integer mod takes two floats or integer as arguments and returns sum

Usage
======

import function from module:
	>>> add_integer = __import__('0-add_integer').add_integer

Add two positive integers (a = 1 and b = 1)
	>>> add_integer(1, 1)
	2

Add one positive and one negetive integer (a = 20 and b = -14)
	>>> add_integer(20, -4)
	6

Add two negative integers (a = -20 and b = -14)
	>>> add_integer(-20, -14)
	-24

Add two integers with the second beingnthe same as the default value (a = 4 and b = 96)
	>>> add_integer(2)
	100

Add positive float and positive integer (a = 2.5 and b = 5)
	>>> add_integer(2.5, 5)
	7

Add float and integer where integer is equal to default value of b (a = 2.5 and b = 98)
	>>> add_integer(2.5)
	100

Add positive float and negative integer (a = 10.5 and b = -2)
	>>> add_integer(10.5, -2)
	8

Add two negative floats (a = -10.5 and b = -3)
	>>> add_integer(-10.5, -2)
	-13

Add an integer number and string (a = 10 and b = "School")
	>>> add_integer(10, "School")
	Traceback (most recent call last):
		...
	TypeError: b must be an integer

Passing no argument to the function
	>>> add_integer(None)
	Traceback (most recent call last):
		...
	TypeError: a must be an integer

Add letter and number (a = 'd' and b = 3)
	>>> add_integer('d', 3)
	Traceback (most recent call last):
                ...
        TypeError: a must be an integer

Add two letters (a = 'd' and b = 'r')
	>>> add_integer('d', 'r')
	Traceback (most recent call last):
                ...
        TypeError: a must be an integer

Add tuple
	>>> add_integer((1, 1))
	Traceback (most recent call last):
                ...
        TypeError: a must be an integer

Add number and list
	>>> add_integer(123, [])
        Traceback (most recent call last):
                ...
        TypeError: a must be an integer

Passing only one string
	>>> add_integer("Hello")
	Traceback (most recent call last):
                ...
        TypeError: a must be an integer

Add two float numbers (a = 1.5 and b = 4.9)
	>>> add_integer(1.5, 4.9)
	6

Case Overflow:

	>>> add_integer(float('inf'), 0)
	Traceback (most recent call last):
                ...
	OverflowError: cannot convert float infinity to integer

Case Overflow 2:

	 >>> add_integer(float('inf'), float('-inf'))
        Traceback (most recent call last):
                ...
        OverflowError: cannot convert float infinity to integer

Case NaN 1:

	 >>> add_integer(0, float('nan'))
        Traceback (most recent call last):
                ...
        ValueError: cannot convert float NaN to integer

Case NaN 2:

         >>> add_integer(float('nan'))
        Traceback (most recent call last):
                ...
        ValueError: cannot convert float NaN to integer
